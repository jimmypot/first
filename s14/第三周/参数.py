'''1'''
'''
定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。
对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，
函数内部的复杂逻辑被封装起来，调用者无需了解。

Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、
可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，
还可以简化调用者的代码。
>>>形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。
因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量

>>>实参可以是常量、变量、表达式、函数等，无论实参是何种类型的量，在进行函数调用时，
它们都必须有确定的值，以便把这些值传送给形参。因此应预先用赋值，输入等办法使参数获得确定值

'''
def text(x,y):  #x,y 为形参，实参与形参是位置一一对应，关键字参数可以按照关键字赋值
    print(x)
    print(y)

text(12,45)    #12,45为实参，实际占据空间的量，此处为位置参数调用
text(y=6,x=7)  #关键字参数调用，与形参顺序无关
text(3,y=2)    #当即有关键字调用，又有位置参数调用，会按照位置参数顺序来调用，位置参数不能放在关键字参数之后

'''def test(*args):
    print(args)

test(1,2,5,47,8)
test(*[1,2,3,4,5,6])

def test1(x,*args):   #*args接收n个位置餐参数，而不是关键字参数
    print(x)
    print(args)
test(1,2,3,4,5,6,7)

def test2(**kwargs):  #将n个关键字参数转换成字典的方式
    print(kwargs)

test(name = 'alex',age = 8,sex = 'F')
'''

def test3(**kwargs):
    print(kwargs)

test3(**{'name':'alex','age':'8'})

def test5(name,**kwargs):
    print(name)
    print(kwargs)

test5('alex',name = 'xxx')

def test6(name,age,**kwargs):
     print(name)
     print(kwargs)

'''
Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！
要注意定义可变参数和关键字参数的语法：
*args是可变参数，args接收的是一个tuple；
**kw是关键字参数，kw接收的是一个dict。

以及调用函数时如何传入可变参数和关键字参数的语法：
可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；
关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。
使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。
命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。
定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。
'''

