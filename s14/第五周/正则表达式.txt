定义---正则表达式是一个特殊的字符序列，用于检查一个字符串是否与某种模式匹配
正则表达式模式--
模式字符串作为re模块中的函数的第一个参数
模式字符串使用特殊的语法来表示一个正则表达式：多数字母和数字表示他们自身（表达式中的字母与数字匹配同样的字符串）
多数字母与数字前加一个反斜杠是拥有不同的含义；标点符号只有被转义时才匹配自身，否则表示特殊的含义；
反斜杠本身需要反斜杠来转义；由于正则表达式常含有反斜杠，所以最好使用原始字符串来表示他们（如r'\t'= \\t)

以下为正则表达式模式语法中常用的特殊元素：
^  匹配字符串的开头
$  匹配字符串的末尾
.  匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符
[...] 用来表示一组字符，单独列出：[amk]匹配'a','m'或'k'
[^...] 不在[]中的字符：[^abc]匹配a,b,c之外的字符
'*'  匹配*前一个字符0次或多次 （如re.findall('ab*','cab3abcbbac'),结果为['abc','ab','a']）
'+'  匹配+前的一个字符1次或多次(如re.findall('ab+','ab+cd+abb+bba'),结果为['ab','abb'])
'?'  匹配？前的一个字符1次或0次
'{m}'  匹配前一个字符m次
'{n,}' 匹配n个前面的表达式
'(n,m)' 匹配前一个字符n次到m次(如re.findall('ab(1,3)','abb abc abbcbbb'),结果为['abb','ab','abb'])
'|'  匹配|左或|右的字符(如re.search('abc|ABC','ABCBabcCD').group() 结果'abc')
'(....)'  分组匹配（如re.search('(abc){2}a(123|456)c','abcabca456c').group() 结果abcabca46c）
(re)  匹配括号内的表达式
\w  匹配字母数字，就是匹配[A-Za-z0-9]
\W  匹配非字母数字
\s  匹配任意空白字符,\t,\n,\r （如re.search('\s+','ab\tc1\n3').group（） 结果为'\t'）
\S  匹配任意非空字符
'A'  只是从字符开头匹配，(如re.search('\Aabc','alexabc'),结果为none)
'Z'  匹配字符串结束，如果存在换行，只匹配换行前的结束字符串，类似于$
'\d'  匹配任意数字[0-9]
'\D'  匹配任意非数字
'\G'  匹配最后匹配完成的位置
'\b'  匹配一个单词的边界，也就是指单词和空格间的位置（例如 'er\b'可以匹配到'never'中的er,但是不能匹配到'verb'中的'er'）
'\B'   同上恰好相反
'(?p<name>...)'  分组匹配 re.search('(?p<province>[0-9]{4})(?<birthday>[0-9]{4})','342423199309192072').groupdirct('city')
运行结果：{'province':'3424','city':'23','birthday':'1993'}  (代码有问题，结果报错******)

python	    匹配 "python".
[Pp]ython	匹配 "Python" 或 "python"
rub[ye]	    匹配 "ruby" 或 "rube"
[aeiou]	    匹配中括号内的任意一个字母
[0-9]	    匹配任何数字。类似于 [0123456789]
[a-z]	    匹配任何小写字母
[A-Z]	    匹配任何大写字母
[a-zA-Z0-9]	匹配任何字母及数字
[^aeiou]	除了aeiou字母以外的所有字符
[^0-9]	    匹配除了数字外的字符
.	        匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。
\d	        匹配一个数字字符。等价于 [0-9]。
\D	        匹配一个非数字字符。等价于 [^0-9]。
\s	        匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
\S	        匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
\w	        匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。
\W	        匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。

正则表达式修饰符——可选标志
正则表达式可以用一些含有可选标志修饰符来控制匹配的模式，修饰符被指定为一个可选的的标志，多个标志可以通过按位OR(|)来指定。
如re.I|re.M被设置成I和M标志：
re.I    使匹配对大小写不敏感
re.L    做本地化识别匹配
re.M    多行识别，影响^和$
re.S    使.匹配包括换行符在内的所有字符
re.U    根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B
re.X    该标志通过给予更灵活的格式以便将正则表达式写得更加便于理解。

Python中常用的正则表达式处理函数：

---re.match函数，它尝试从字符串的起始位置匹配一个模式，如果在起始位置匹配不到，则match()返回none.
函数语法：re.match(pattern,string,flags=0)
其中pattern是匹配的正则表达式，string是要匹配的字符串，flags是标志位，用于控制正则表达式的匹配方式，如是否区别大小写
匹配成功则返回一个匹配的对象，并且可以用group()或者groups（）匹配对象函数来获取匹配表达式。
group(num=0)   匹配整个表达式的字符串，group（）可以一次输入多个组号，则他返回一个包含那些组所对应值的元祖
groups（）     返回一个包含所有小组字符串的元祖，从1大所包含的小组号
实例1
 import re
 print(re.match('www','www.runoob.com').span())  #在起始位置匹配
 print(re.match('com','www.runoob.com'))  #不再开始位置匹配
 输出结果为：（0,3） None
 实例2
 import re
 line = 'Cats are smarter than dogs'
 motch0bj = re.match(r'(.*)are(.*?).*',line,re.M|re.I)
 if match0bj:
    print ("matchObj.group() : ", matchObj.group())
    print ("matchObj.group(1) : ", matchObj.group(1))
    print ("matchObj.group(2) : ", matchObj.group(2))
 else:
    print ("No match!!")

以上实例执行结果如下：
matchObj.group() :  Cats are smarter than dogs
matchObj.group(1) :  Cats
matchObj.group(2) :  smarter


---re.searc函数
re.search扫描整个字符串，并且返回第一个成功的匹配，函数语法：re.seaarch(pattern,string,flags=0)
实例1:
import re
print(re.search('www','www.runoob.com').span())
print(re.search('com','www.runoob.com').span())
运行结果：
(0,3)
(11,14)

实例2：
import re
line = 'Cats are smarter than dogs'
 motch0bj = re.search(r'(.*)are(.*?).*',line,re.M|re.I)
 if match0bj:
    print ("searchObj.group() : ", matchObj.group())
    print (searchObj.group(1) : ", matchObj.group(1))
    print ("searchObj.group(2) : ", matchObj.group(2))
 else:
    print ("Nothing found!")

以上实例执行结果如下：
searchObj.group() :  Cats are smarter than dogs
searchObj.group(1) :  Cats
searchObj.group(2) :  smarter
首先，这是一个字符串，前面的一个 r 表示字符串为非转义的原始字符串，让编译器忽略反斜杠，也就是忽略转义字符。
但是这个字符串里没有反斜杠，所以这个 r 可有可无。
(.*) 第一个匹配分组，.* 代表匹配除换行符之外的所有字符。
(.*?) 第二个匹配分组，.*? 后面多个问号，代表非贪婪模式，也就是说只匹配符合条件的最少字符
后面的一个 .* 没有括号包围，所以不是分组，匹配效果和第一个一样，但是不计入匹配结果中。
matchObj.group() 等同于 matchObj.group(0)，表示匹配到的完整文本字符
matchObj.group(1) 得到第一组匹配结果，也就是(.*)匹配到的
matchObj.group(2) 得到第二组匹配结果，也就是(.*?)匹配到的
因为只有匹配结果中只有两组，所以如果填 3 时会报错。

***re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；
而re.search匹配整个字符串，直到找到一个匹配。

---re.sub()函数
python中re模块提供了re.sub用于替换字符串中的匹配项
语法：re.sub(pattern,repl,string,count=0)
参数：patter:正则表达式中模式字符串；reply:替换的字符串，也可为一个函数
string：要被查找的原始字符串；count:模式匹配后替换的最大次数，默0表示替换所有的匹配。
实例：
import re
phone = '2004-959-559 #这是一个电话号码'
#删除注释
print('电话号码'，re.sub(r'#.*$','',phone))
#移除非数字的内容
print('电话号码',re.sub(r'\D','',phone))
运行结果如下：
电话号码 2004-959-559
电话号码 2004959559

repl参数是一个函数，在下面一个实例中将字符串中的匹配的数字乘以2：
import re
#将匹配的数字乘以2
def double(matched):
    value = int(matched.group('value'))
    return str(value*2)
s = 'A23G8HFD1134'
print(re.sub('(?p<value>\d+'),double,s))
运行结果为：A46G8HFD1134

实例2：
s = '2017-11-27'
import re
print(re.sub('(\d{4})-(\d{2})-(\d{2})',r'\2/\3/\1',s))
运行结果：11/27/2017
用()来划定原字符的组，{}中表示数字的个数，r即后面的字符串为原始字符串，防止计算机将、理解为转义字符，
2,3,1为输入的字符串三段的序号

---re.findall函数
正则 re.findall  的简单用法（返回string中所有与pattern相匹配的全部字串，返回形式为数组）
语法：findall(pattern, string, flags=0)
实例：
findall查找全部r后面的字符
regular_v1 = re.findall(r"docs","https://docs.python.org/3/whatsnew/3.6.html")
print(regular_v1)
结果： ['docs']

符号^表示匹配以https开头的的字符串返回,
regular_v2 = re.findall(r"^https","https://docs.python.org/3/whatsnew/3.6.html")
print(regular_v2)
结果：['https']

用$符号表示以html结尾的字符串返回,判断是否字符串结束的字符串
regular_v3 = re.findall(r"html$","https://docs.python.org/3/whatsnew/3.6.html")
print(regular_v3)
结果：['html']

[...]匹配括号中的其中一个字符
regular_v4 = re.findall(r"[t,w]h","https://docs.python.org/3/whatsnew/3.6.html")
print(regular_v4)
结果：['th', 'wh']

[...]匹配括号中的其中一个字符
regular_v4 = re.findall(r"[t,w]h","https://docs.python.org/3/whatsnew/3.6.html")
print(regular_v4)
结果：['th', 'wh']

小d表示取数字0-9，大D表示不要数字，也就是出了数字以外的内容返回
regular_v7 = re.findall(r"\D","https://docs.python.org/3/whatsnew/3.6.html")
print(regular_v7)
结果：['h', 't', 't', 'p', 's', ':', '/', '/', 'd', 'o', 'c', 's', '.', 'p', 'y', 't', 'h', 'o', 'n', '.', 'o', 'r',
 'g', '/', '/', 'w', 'h', 'a', 't', 's', 'n', 'e', 'w', '/', '.', '.', 'h', 't', 'm', 'l']

“w”在正则里面代表匹配从小写a到z,大写A到Z，数字0到9
regular_v8 = re.findall(r"\w","https://docs.python.org/3/whatsnew/3.6.html")
print(regular_v8)
结果：['h', 't', 't', 'p', 's', 'd', 'o', 'c', 's', 'p', 'y', 't', 'h', 'o', 'n', 'o', 'r', 'g', '3', 'w',
'h', 'a', 't', 's', 'n', 'e', 'w', '3', '6', 'h', 't', 'm', 'l']

“W”在正则里面代表匹配除了字母与数字以外的特殊符号
regular_v9 = re.findall(r"\W","https://docs.python.org/3/whatsnew/3.6.html")
print(regular_v9)
结果：[':', '/', '/', '.', '.', '/', '/', '/', '.', '.']

