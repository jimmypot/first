multiprocessing 模块生成进程的方式就和你使用 threading 模块生成线程是一样的。
我们将从 multiprocessing 模块的 Process 类开始介绍。
***Process 类和 threading 模块的 Thread 类很像。我们来创建一系列调用同一个函数的进程，看它是如何工作的：
实例见多线程1、多线程2

****锁
Multiprocessing 模块和 Threading 模块一样，也支持“锁”。你需要做的就是 import Lock，获取它，执行操作后再释放它。
实例见多线程_锁

****pool
进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进进程，
那么程序就会等待，直到进程池中有可用进程为止。

进程池中有两个方法：
apply
apply_async

****进程间通讯 Queues ,Pipes

Queue的使用主要是一边put(),一边get().但是Queue可以是多个Process 进行put操作，也可以是多个Process进行get()操作。

multiprocessing.Pipe()
Pipe()函数返回一对由管道连接的连接对象，默认情况下是双工（双向）。
Pipe()返回的两个连接对象代表管道的两端。 每个连接对象都有send（）和recv（）方法（等等）。
请注意，如果两个进程（或线程）尝试同时读取或写入管道的同一端，管道中的数据可能会损坏。
当然，同时使用管道不同端的过程也不会有风险。

返回表示管道末端的一对Connection（conn1，conn2）对象。
如果duplex为True（默认），则管道是双向的。
如果duplex是False，那么管道是单向的：conn1只能用于接收消息，conn2只能用于发送消息。


****manager
在Thread和Process中应当优选Process，因为Process更稳定，而且Process可以分布到多台机器上，而Thread最多只能分布到同一台机器的多个CPU上。
Python的multiprocessing模块不但支持多进程，其中managers子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，
将任务分布到其他多个进程中，依靠网络通信。由于managers模块封装很好，不必了解网络通信的细节，就可以很容易地编写分布式多进程程序。

举个例子：如果我们已经有一个通过Queue通信的多进程程序在同一台机器上运行，现在，由于处理任务的进程任务繁重，
希望把发送任务的进程和处理任务的进程分布到两台机器上。怎么用分布式进程实现？
原有的Queue可以继续使用，但是，通过managers模块把Queue通过网络暴露出去，就可以让其他机器的进程访问Queue了。

multiprocessing.Manager对象像是一个保存状态的代理，其他进程通过与代理的接口通信取得状态信息，
服务进程支持更多的数据类型，使用起来比共享内存更灵活。

